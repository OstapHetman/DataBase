//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
//using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Hospital_Admin", "Admin", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ButtonClass.Admin), "Hospital", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ButtonClass.Hospital), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Analysis_Patient", "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ButtonClass.Patient), "Analysis", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ButtonClass.Analysis), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Diagnosis_Analysis", "Analysis", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ButtonClass.Analysis), "Diagnosis", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ButtonClass.Diagnosis), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Type_of_analysis_Analysis", "Analysis", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ButtonClass.Analysis), "Type_of_analysis", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ButtonClass.Type_of_analysis), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Diagnosis_DOCTORS_1", "DOCTORS_1", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ButtonClass.DOCTORS_1), "Diagnosis", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ButtonClass.Diagnosis), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_DOCTORS_1_Hospital", "Hospital", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ButtonClass.Hospital), "DOCTORS_1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ButtonClass.DOCTORS_1), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Patient_DOCTORS_1", "DOCTORS_1", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ButtonClass.DOCTORS_1), "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ButtonClass.Patient), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Engineer_1_Hospital", "Hospital", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ButtonClass.Hospital), "Engineer_1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ButtonClass.Engineer_1), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Engineer_1_Laboratory", "Laboratory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ButtonClass.Laboratory), "Engineer_1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ButtonClass.Engineer_1), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Type_of_analysis_Engineer_1", "Engineer_1", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ButtonClass.Engineer_1), "Type_of_analysis", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ButtonClass.Type_of_analysis), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Laboratory_Hospital", "Hospital", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ButtonClass.Hospital), "Laboratory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ButtonClass.Laboratory), true)]
[assembly: EdmRelationshipAttribute("HospitalModel", "FK_Type_of_analysis_Laboratory", "Laboratory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ButtonClass.Laboratory), "Type_of_analysis", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ButtonClass.Type_of_analysis), true)]

#endregion

namespace ButtonClass
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class HospitalEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект HospitalEntities, используя строку соединения из раздела "HospitalEntities" файла конфигурации приложения.
        /// </summary>
        public HospitalEntities() : base("name=HospitalEntities", "HospitalEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта HospitalEntities.
        /// </summary>
        public HospitalEntities(string connectionString) : base(connectionString, "HospitalEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта HospitalEntities.
        /// </summary>
        public HospitalEntities(EntityConnection connection) : base(connection, "HospitalEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Admin> Admin
        {
            get
            {
                if ((_Admin == null))
                {
                    _Admin = base.CreateObjectSet<Admin>("Admin");
                }
                return _Admin;
            }
        }
        private ObjectSet<Admin> _Admin;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Analysis> Analysis
        {
            get
            {
                if ((_Analysis == null))
                {
                    _Analysis = base.CreateObjectSet<Analysis>("Analysis");
                }
                return _Analysis;
            }
        }
        private ObjectSet<Analysis> _Analysis;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Diagnosis> Diagnosis
        {
            get
            {
                if ((_Diagnosis == null))
                {
                    _Diagnosis = base.CreateObjectSet<Diagnosis>("Diagnosis");
                }
                return _Diagnosis;
            }
        }
        private ObjectSet<Diagnosis> _Diagnosis;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<DOCTORS_1> DOCTORS_1
        {
            get
            {
                if ((_DOCTORS_1 == null))
                {
                    _DOCTORS_1 = base.CreateObjectSet<DOCTORS_1>("DOCTORS_1");
                }
                return _DOCTORS_1;
            }
        }
        private ObjectSet<DOCTORS_1> _DOCTORS_1;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Engineer_1> Engineer_1
        {
            get
            {
                if ((_Engineer_1 == null))
                {
                    _Engineer_1 = base.CreateObjectSet<Engineer_1>("Engineer_1");
                }
                return _Engineer_1;
            }
        }
        private ObjectSet<Engineer_1> _Engineer_1;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Hospital> Hospital
        {
            get
            {
                if ((_Hospital == null))
                {
                    _Hospital = base.CreateObjectSet<Hospital>("Hospital");
                }
                return _Hospital;
            }
        }
        private ObjectSet<Hospital> _Hospital;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Laboratory> Laboratory
        {
            get
            {
                if ((_Laboratory == null))
                {
                    _Laboratory = base.CreateObjectSet<Laboratory>("Laboratory");
                }
                return _Laboratory;
            }
        }
        private ObjectSet<Laboratory> _Laboratory;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Patient> Patient
        {
            get
            {
                if ((_Patient == null))
                {
                    _Patient = base.CreateObjectSet<Patient>("Patient");
                }
                return _Patient;
            }
        }
        private ObjectSet<Patient> _Patient;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Type_of_analysis> Type_of_analysis
        {
            get
            {
                if ((_Type_of_analysis == null))
                {
                    _Type_of_analysis = base.CreateObjectSet<Type_of_analysis>("Type_of_analysis");
                }
                return _Type_of_analysis;
            }
        }
        private ObjectSet<Type_of_analysis> _Type_of_analysis;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Admin. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAdmin(Admin admin)
        {
            base.AddObject("Admin", admin);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Analysis. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAnalysis(Analysis analysis)
        {
            base.AddObject("Analysis", analysis);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Diagnosis. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDiagnosis(Diagnosis diagnosis)
        {
            base.AddObject("Diagnosis", diagnosis);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet DOCTORS_1. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDOCTORS_1(DOCTORS_1 dOCTORS_1)
        {
            base.AddObject("DOCTORS_1", dOCTORS_1);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Engineer_1. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToEngineer_1(Engineer_1 engineer_1)
        {
            base.AddObject("Engineer_1", engineer_1);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Hospital. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToHospital(Hospital hospital)
        {
            base.AddObject("Hospital", hospital);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Laboratory. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToLaboratory(Laboratory laboratory)
        {
            base.AddObject("Laboratory", laboratory);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Patient. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPatient(Patient patient)
        {
            base.AddObject("Patient", patient);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Type_of_analysis. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToType_of_analysis(Type_of_analysis type_of_analysis)
        {
            base.AddObject("Type_of_analysis", type_of_analysis);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HospitalModel", Name="Admin")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Admin : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Admin.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="login">Исходное значение свойства Login.</param>
        /// <param name="password">Исходное значение свойства Password.</param>
        public static Admin CreateAdmin(global::System.Int32 id, global::System.String login, global::System.String password)
        {
            Admin admin = new Admin();
            admin.ID = id;
            admin.Login = login;
            admin.Password = password;
            return admin;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Login
        {
            get
            {
                return _Login;
            }
            set
            {
                OnLoginChanging(value);
                ReportPropertyChanging("Login");
                _Login = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Login");
                OnLoginChanged();
            }
        }
        private global::System.String _Login;
        partial void OnLoginChanging(global::System.String value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Hospital_Admin", "Hospital")]
        public EntityCollection<Hospital> Hospital
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Hospital>("HospitalModel.FK_Hospital_Admin", "Hospital");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Hospital>("HospitalModel.FK_Hospital_Admin", "Hospital", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HospitalModel", Name="Analysis")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Analysis : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Analysis.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="type_of_analysis">Исходное значение свойства Type_of_analysis.</param>
        /// <param name="state_of_analysis">Исходное значение свойства State_of_analysis.</param>
        public static Analysis CreateAnalysis(global::System.Int32 id, global::System.String type_of_analysis, global::System.String state_of_analysis)
        {
            Analysis analysis = new Analysis();
            analysis.ID = id;
            analysis.Type_of_analysis = type_of_analysis;
            analysis.State_of_analysis = state_of_analysis;
            return analysis;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Type_of_analysis
        {
            get
            {
                return _Type_of_analysis;
            }
            set
            {
                OnType_of_analysisChanging(value);
                ReportPropertyChanging("Type_of_analysis");
                _Type_of_analysis = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Type_of_analysis");
                OnType_of_analysisChanged();
            }
        }
        private global::System.String _Type_of_analysis;
        partial void OnType_of_analysisChanging(global::System.String value);
        partial void OnType_of_analysisChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String State_of_analysis
        {
            get
            {
                return _State_of_analysis;
            }
            set
            {
                OnState_of_analysisChanging(value);
                ReportPropertyChanging("State_of_analysis");
                _State_of_analysis = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("State_of_analysis");
                OnState_of_analysisChanged();
            }
        }
        private global::System.String _State_of_analysis;
        partial void OnState_of_analysisChanging(global::System.String value);
        partial void OnState_of_analysisChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date_created
        {
            get
            {
                return _Date_created;
            }
            set
            {
                OnDate_createdChanging(value);
                ReportPropertyChanging("Date_created");
                _Date_created = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date_created");
                OnDate_createdChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date_created;
        partial void OnDate_createdChanging(Nullable<global::System.DateTime> value);
        partial void OnDate_createdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Author
        {
            get
            {
                return _Author;
            }
            set
            {
                OnAuthorChanging(value);
                ReportPropertyChanging("Author");
                _Author = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Author");
                OnAuthorChanged();
            }
        }
        private global::System.String _Author;
        partial void OnAuthorChanging(global::System.String value);
        partial void OnAuthorChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Analysis_Patient", "Patient")]
        public Patient Patient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("HospitalModel.FK_Analysis_Patient", "Patient").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("HospitalModel.FK_Analysis_Patient", "Patient").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patient> PatientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("HospitalModel.FK_Analysis_Patient", "Patient");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patient>("HospitalModel.FK_Analysis_Patient", "Patient", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Diagnosis_Analysis", "Diagnosis")]
        public EntityCollection<Diagnosis> Diagnosis
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Diagnosis>("HospitalModel.FK_Diagnosis_Analysis", "Diagnosis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Diagnosis>("HospitalModel.FK_Diagnosis_Analysis", "Diagnosis", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Type_of_analysis_Analysis", "Type_of_analysis")]
        public Type_of_analysis Type_of_analysis1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Analysis", "Type_of_analysis").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Analysis", "Type_of_analysis").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Type_of_analysis> Type_of_analysis1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Analysis", "Type_of_analysis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Analysis", "Type_of_analysis", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HospitalModel", Name="Diagnosis")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Diagnosis : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Diagnosis.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="analysis">Исходное значение свойства Analysis.</param>
        /// <param name="analysisID">Исходное значение свойства AnalysisID.</param>
        public static Diagnosis CreateDiagnosis(global::System.Int32 id, global::System.String analysis, global::System.Int32 analysisID)
        {
            Diagnosis diagnosis = new Diagnosis();
            diagnosis.ID = id;
            diagnosis.Analysis = analysis;
            diagnosis.AnalysisID = analysisID;
            return diagnosis;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Analysis
        {
            get
            {
                return _Analysis;
            }
            set
            {
                OnAnalysisChanging(value);
                ReportPropertyChanging("Analysis");
                _Analysis = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Analysis");
                OnAnalysisChanged();
            }
        }
        private global::System.String _Analysis;
        partial void OnAnalysisChanging(global::System.String value);
        partial void OnAnalysisChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AnalysisID
        {
            get
            {
                return _AnalysisID;
            }
            set
            {
                OnAnalysisIDChanging(value);
                ReportPropertyChanging("AnalysisID");
                _AnalysisID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AnalysisID");
                OnAnalysisIDChanged();
            }
        }
        private global::System.Int32 _AnalysisID;
        partial void OnAnalysisIDChanging(global::System.Int32 value);
        partial void OnAnalysisIDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Diagnosis_Analysis", "Analysis")]
        public Analysis Analysis1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Analysis>("HospitalModel.FK_Diagnosis_Analysis", "Analysis").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Analysis>("HospitalModel.FK_Diagnosis_Analysis", "Analysis").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Analysis> Analysis1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Analysis>("HospitalModel.FK_Diagnosis_Analysis", "Analysis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Analysis>("HospitalModel.FK_Diagnosis_Analysis", "Analysis", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Diagnosis_DOCTORS_1", "DOCTORS_1")]
        public DOCTORS_1 DOCTORS_1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DOCTORS_1>("HospitalModel.FK_Diagnosis_DOCTORS_1", "DOCTORS_1").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DOCTORS_1>("HospitalModel.FK_Diagnosis_DOCTORS_1", "DOCTORS_1").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DOCTORS_1> DOCTORS_1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DOCTORS_1>("HospitalModel.FK_Diagnosis_DOCTORS_1", "DOCTORS_1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DOCTORS_1>("HospitalModel.FK_Diagnosis_DOCTORS_1", "DOCTORS_1", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HospitalModel", Name="DOCTORS_1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DOCTORS_1 : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта DOCTORS_1.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="firstName">Исходное значение свойства FirstName.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        /// <param name="login">Исходное значение свойства Login.</param>
        /// <param name="password">Исходное значение свойства Password.</param>
        public static DOCTORS_1 CreateDOCTORS_1(global::System.Int32 id, global::System.String firstName, global::System.String lastName, global::System.String login, global::System.String password)
        {
            DOCTORS_1 dOCTORS_1 = new DOCTORS_1();
            dOCTORS_1.ID = id;
            dOCTORS_1.FirstName = firstName;
            dOCTORS_1.LastName = lastName;
            dOCTORS_1.Login = login;
            dOCTORS_1.Password = password;
            return dOCTORS_1;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> HospitalID
        {
            get
            {
                return _HospitalID;
            }
            set
            {
                OnHospitalIDChanging(value);
                ReportPropertyChanging("HospitalID");
                _HospitalID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HospitalID");
                OnHospitalIDChanged();
            }
        }
        private Nullable<global::System.Int32> _HospitalID;
        partial void OnHospitalIDChanging(Nullable<global::System.Int32> value);
        partial void OnHospitalIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Login
        {
            get
            {
                return _Login;
            }
            set
            {
                OnLoginChanging(value);
                ReportPropertyChanging("Login");
                _Login = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Login");
                OnLoginChanged();
            }
        }
        private global::System.String _Login;
        partial void OnLoginChanging(global::System.String value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Diagnosis_DOCTORS_1", "Diagnosis")]
        public Diagnosis Diagnosis
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Diagnosis>("HospitalModel.FK_Diagnosis_DOCTORS_1", "Diagnosis").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Diagnosis>("HospitalModel.FK_Diagnosis_DOCTORS_1", "Diagnosis").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Diagnosis> DiagnosisReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Diagnosis>("HospitalModel.FK_Diagnosis_DOCTORS_1", "Diagnosis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Diagnosis>("HospitalModel.FK_Diagnosis_DOCTORS_1", "Diagnosis", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_DOCTORS_1_Hospital", "Hospital")]
        public Hospital Hospital
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hospital>("HospitalModel.FK_DOCTORS_1_Hospital", "Hospital").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hospital>("HospitalModel.FK_DOCTORS_1_Hospital", "Hospital").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Hospital> HospitalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hospital>("HospitalModel.FK_DOCTORS_1_Hospital", "Hospital");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Hospital>("HospitalModel.FK_DOCTORS_1_Hospital", "Hospital", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Patient_DOCTORS_1", "Patient")]
        public EntityCollection<Patient> Patient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Patient>("HospitalModel.FK_Patient_DOCTORS_1", "Patient");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Patient>("HospitalModel.FK_Patient_DOCTORS_1", "Patient", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HospitalModel", Name="Engineer_1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Engineer_1 : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Engineer_1.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="firstName">Исходное значение свойства FirstName.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        /// <param name="login">Исходное значение свойства Login.</param>
        /// <param name="password">Исходное значение свойства Password.</param>
        /// <param name="laboratoryID">Исходное значение свойства LaboratoryID.</param>
        /// <param name="hospitalID">Исходное значение свойства HospitalID.</param>
        public static Engineer_1 CreateEngineer_1(global::System.Int32 id, global::System.String firstName, global::System.String lastName, global::System.String login, global::System.String password, global::System.Int32 laboratoryID, global::System.Int32 hospitalID)
        {
            Engineer_1 engineer_1 = new Engineer_1();
            engineer_1.ID = id;
            engineer_1.FirstName = firstName;
            engineer_1.LastName = lastName;
            engineer_1.Login = login;
            engineer_1.Password = password;
            engineer_1.LaboratoryID = laboratoryID;
            engineer_1.HospitalID = hospitalID;
            return engineer_1;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Login
        {
            get
            {
                return _Login;
            }
            set
            {
                OnLoginChanging(value);
                ReportPropertyChanging("Login");
                _Login = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Login");
                OnLoginChanged();
            }
        }
        private global::System.String _Login;
        partial void OnLoginChanging(global::System.String value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LaboratoryID
        {
            get
            {
                return _LaboratoryID;
            }
            set
            {
                OnLaboratoryIDChanging(value);
                ReportPropertyChanging("LaboratoryID");
                _LaboratoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LaboratoryID");
                OnLaboratoryIDChanged();
            }
        }
        private global::System.Int32 _LaboratoryID;
        partial void OnLaboratoryIDChanging(global::System.Int32 value);
        partial void OnLaboratoryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 HospitalID
        {
            get
            {
                return _HospitalID;
            }
            set
            {
                OnHospitalIDChanging(value);
                ReportPropertyChanging("HospitalID");
                _HospitalID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HospitalID");
                OnHospitalIDChanged();
            }
        }
        private global::System.Int32 _HospitalID;
        partial void OnHospitalIDChanging(global::System.Int32 value);
        partial void OnHospitalIDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Engineer_1_Hospital", "Hospital")]
        public Hospital Hospital
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hospital>("HospitalModel.FK_Engineer_1_Hospital", "Hospital").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hospital>("HospitalModel.FK_Engineer_1_Hospital", "Hospital").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Hospital> HospitalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hospital>("HospitalModel.FK_Engineer_1_Hospital", "Hospital");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Hospital>("HospitalModel.FK_Engineer_1_Hospital", "Hospital", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Engineer_1_Laboratory", "Laboratory")]
        public Laboratory Laboratory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Laboratory>("HospitalModel.FK_Engineer_1_Laboratory", "Laboratory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Laboratory>("HospitalModel.FK_Engineer_1_Laboratory", "Laboratory").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Laboratory> LaboratoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Laboratory>("HospitalModel.FK_Engineer_1_Laboratory", "Laboratory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Laboratory>("HospitalModel.FK_Engineer_1_Laboratory", "Laboratory", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Type_of_analysis_Engineer_1", "Type_of_analysis")]
        public Type_of_analysis Type_of_analysis
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Engineer_1", "Type_of_analysis").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Engineer_1", "Type_of_analysis").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Type_of_analysis> Type_of_analysisReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Engineer_1", "Type_of_analysis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Engineer_1", "Type_of_analysis", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HospitalModel", Name="Hospital")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Hospital : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Hospital.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static Hospital CreateHospital(global::System.Int32 id)
        {
            Hospital hospital = new Hospital();
            hospital.ID = id;
            return hospital;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Adress
        {
            get
            {
                return _Adress;
            }
            set
            {
                OnAdressChanging(value);
                ReportPropertyChanging("Adress");
                _Adress = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Adress");
                OnAdressChanged();
            }
        }
        private global::System.String _Adress;
        partial void OnAdressChanging(global::System.String value);
        partial void OnAdressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> C__of_workers
        {
            get
            {
                return _C__of_workers;
            }
            set
            {
                OnC__of_workersChanging(value);
                ReportPropertyChanging("C__of_workers");
                _C__of_workers = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("C__of_workers");
                OnC__of_workersChanged();
            }
        }
        private Nullable<global::System.Int32> _C__of_workers;
        partial void OnC__of_workersChanging(Nullable<global::System.Int32> value);
        partial void OnC__of_workersChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Doctors_ID
        {
            get
            {
                return _Doctors_ID;
            }
            set
            {
                OnDoctors_IDChanging(value);
                ReportPropertyChanging("Doctors_ID");
                _Doctors_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Doctors_ID");
                OnDoctors_IDChanged();
            }
        }
        private Nullable<global::System.Int32> _Doctors_ID;
        partial void OnDoctors_IDChanging(Nullable<global::System.Int32> value);
        partial void OnDoctors_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Enginners_ID
        {
            get
            {
                return _Enginners_ID;
            }
            set
            {
                OnEnginners_IDChanging(value);
                ReportPropertyChanging("Enginners_ID");
                _Enginners_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Enginners_ID");
                OnEnginners_IDChanged();
            }
        }
        private Nullable<global::System.Int32> _Enginners_ID;
        partial void OnEnginners_IDChanging(Nullable<global::System.Int32> value);
        partial void OnEnginners_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Admins_ID
        {
            get
            {
                return _Admins_ID;
            }
            set
            {
                OnAdmins_IDChanging(value);
                ReportPropertyChanging("Admins_ID");
                _Admins_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Admins_ID");
                OnAdmins_IDChanged();
            }
        }
        private Nullable<global::System.Int32> _Admins_ID;
        partial void OnAdmins_IDChanging(Nullable<global::System.Int32> value);
        partial void OnAdmins_IDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Hospital_Admin", "Admin")]
        public Admin Admin
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Admin>("HospitalModel.FK_Hospital_Admin", "Admin").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Admin>("HospitalModel.FK_Hospital_Admin", "Admin").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Admin> AdminReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Admin>("HospitalModel.FK_Hospital_Admin", "Admin");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Admin>("HospitalModel.FK_Hospital_Admin", "Admin", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_DOCTORS_1_Hospital", "DOCTORS_1")]
        public EntityCollection<DOCTORS_1> DOCTORS_1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DOCTORS_1>("HospitalModel.FK_DOCTORS_1_Hospital", "DOCTORS_1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DOCTORS_1>("HospitalModel.FK_DOCTORS_1_Hospital", "DOCTORS_1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Engineer_1_Hospital", "Engineer_1")]
        public EntityCollection<Engineer_1> Engineer_1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Engineer_1>("HospitalModel.FK_Engineer_1_Hospital", "Engineer_1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Engineer_1>("HospitalModel.FK_Engineer_1_Hospital", "Engineer_1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Laboratory_Hospital", "Laboratory")]
        public EntityCollection<Laboratory> Laboratory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Laboratory>("HospitalModel.FK_Laboratory_Hospital", "Laboratory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Laboratory>("HospitalModel.FK_Laboratory_Hospital", "Laboratory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HospitalModel", Name="Laboratory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Laboratory : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Laboratory.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static Laboratory CreateLaboratory(global::System.Int32 id)
        {
            Laboratory laboratory = new Laboratory();
            laboratory.ID = id;
            return laboratory;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> C__room
        {
            get
            {
                return _C__room;
            }
            set
            {
                OnC__roomChanging(value);
                ReportPropertyChanging("C__room");
                _C__room = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("C__room");
                OnC__roomChanged();
            }
        }
        private Nullable<global::System.Int32> _C__room;
        partial void OnC__roomChanging(Nullable<global::System.Int32> value);
        partial void OnC__roomChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Type_of_research
        {
            get
            {
                return _Type_of_research;
            }
            set
            {
                OnType_of_researchChanging(value);
                ReportPropertyChanging("Type_of_research");
                _Type_of_research = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Type_of_research");
                OnType_of_researchChanged();
            }
        }
        private global::System.String _Type_of_research;
        partial void OnType_of_researchChanging(global::System.String value);
        partial void OnType_of_researchChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Who_works
        {
            get
            {
                return _Who_works;
            }
            set
            {
                OnWho_worksChanging(value);
                ReportPropertyChanging("Who_works");
                _Who_works = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Who_works");
                OnWho_worksChanged();
            }
        }
        private global::System.String _Who_works;
        partial void OnWho_worksChanging(global::System.String value);
        partial void OnWho_worksChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> HospitalID
        {
            get
            {
                return _HospitalID;
            }
            set
            {
                OnHospitalIDChanging(value);
                ReportPropertyChanging("HospitalID");
                _HospitalID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HospitalID");
                OnHospitalIDChanged();
            }
        }
        private Nullable<global::System.Int32> _HospitalID;
        partial void OnHospitalIDChanging(Nullable<global::System.Int32> value);
        partial void OnHospitalIDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Engineer_1_Laboratory", "Engineer_1")]
        public EntityCollection<Engineer_1> Engineer_1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Engineer_1>("HospitalModel.FK_Engineer_1_Laboratory", "Engineer_1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Engineer_1>("HospitalModel.FK_Engineer_1_Laboratory", "Engineer_1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Laboratory_Hospital", "Hospital")]
        public Hospital Hospital
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hospital>("HospitalModel.FK_Laboratory_Hospital", "Hospital").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hospital>("HospitalModel.FK_Laboratory_Hospital", "Hospital").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Hospital> HospitalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hospital>("HospitalModel.FK_Laboratory_Hospital", "Hospital");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Hospital>("HospitalModel.FK_Laboratory_Hospital", "Hospital", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Type_of_analysis_Laboratory", "Type_of_analysis")]
        public Type_of_analysis Type_of_analysis
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Laboratory", "Type_of_analysis").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Laboratory", "Type_of_analysis").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Type_of_analysis> Type_of_analysisReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Laboratory", "Type_of_analysis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Type_of_analysis>("HospitalModel.FK_Type_of_analysis_Laboratory", "Type_of_analysis", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HospitalModel", Name="Patient")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Patient : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Patient.
        /// </summary>
        /// <param name="sSN">Исходное значение свойства SSN.</param>
        /// <param name="firstName">Исходное значение свойства FirstName.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        /// <param name="docrotsID">Исходное значение свойства DocrotsID.</param>
        public static Patient CreatePatient(global::System.Int32 sSN, global::System.String firstName, global::System.String lastName, global::System.Int32 docrotsID)
        {
            Patient patient = new Patient();
            patient.SSN = sSN;
            patient.FirstName = firstName;
            patient.LastName = lastName;
            patient.DocrotsID = docrotsID;
            return patient;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SSN
        {
            get
            {
                return _SSN;
            }
            set
            {
                if (_SSN != value)
                {
                    OnSSNChanging(value);
                    ReportPropertyChanging("SSN");
                    _SSN = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SSN");
                    OnSSNChanged();
                }
            }
        }
        private global::System.Int32 _SSN;
        partial void OnSSNChanging(global::System.Int32 value);
        partial void OnSSNChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocrotsID
        {
            get
            {
                return _DocrotsID;
            }
            set
            {
                OnDocrotsIDChanging(value);
                ReportPropertyChanging("DocrotsID");
                _DocrotsID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocrotsID");
                OnDocrotsIDChanged();
            }
        }
        private global::System.Int32 _DocrotsID;
        partial void OnDocrotsIDChanging(global::System.Int32 value);
        partial void OnDocrotsIDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Analysis_Patient", "Analysis")]
        public Analysis Analysis
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Analysis>("HospitalModel.FK_Analysis_Patient", "Analysis").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Analysis>("HospitalModel.FK_Analysis_Patient", "Analysis").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Analysis> AnalysisReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Analysis>("HospitalModel.FK_Analysis_Patient", "Analysis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Analysis>("HospitalModel.FK_Analysis_Patient", "Analysis", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Patient_DOCTORS_1", "DOCTORS_1")]
        public DOCTORS_1 DOCTORS_1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DOCTORS_1>("HospitalModel.FK_Patient_DOCTORS_1", "DOCTORS_1").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DOCTORS_1>("HospitalModel.FK_Patient_DOCTORS_1", "DOCTORS_1").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DOCTORS_1> DOCTORS_1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DOCTORS_1>("HospitalModel.FK_Patient_DOCTORS_1", "DOCTORS_1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DOCTORS_1>("HospitalModel.FK_Patient_DOCTORS_1", "DOCTORS_1", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HospitalModel", Name="Type_of_analysis")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Type_of_analysis : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Type_of_analysis.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name_analysis">Исходное значение свойства Name_analysis.</param>
        public static Type_of_analysis CreateType_of_analysis(global::System.Int32 id, global::System.String name_analysis)
        {
            Type_of_analysis type_of_analysis = new Type_of_analysis();
            type_of_analysis.ID = id;
            type_of_analysis.Name_analysis = name_analysis;
            return type_of_analysis;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name_analysis
        {
            get
            {
                return _Name_analysis;
            }
            set
            {
                OnName_analysisChanging(value);
                ReportPropertyChanging("Name_analysis");
                _Name_analysis = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name_analysis");
                OnName_analysisChanged();
            }
        }
        private global::System.String _Name_analysis;
        partial void OnName_analysisChanging(global::System.String value);
        partial void OnName_analysisChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Type_of_analysis_Analysis", "Analysis")]
        public Analysis Analysis
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Analysis>("HospitalModel.FK_Type_of_analysis_Analysis", "Analysis").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Analysis>("HospitalModel.FK_Type_of_analysis_Analysis", "Analysis").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Analysis> AnalysisReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Analysis>("HospitalModel.FK_Type_of_analysis_Analysis", "Analysis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Analysis>("HospitalModel.FK_Type_of_analysis_Analysis", "Analysis", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Type_of_analysis_Engineer_1", "Engineer_1")]
        public Engineer_1 Engineer_1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Engineer_1>("HospitalModel.FK_Type_of_analysis_Engineer_1", "Engineer_1").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Engineer_1>("HospitalModel.FK_Type_of_analysis_Engineer_1", "Engineer_1").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Engineer_1> Engineer_1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Engineer_1>("HospitalModel.FK_Type_of_analysis_Engineer_1", "Engineer_1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Engineer_1>("HospitalModel.FK_Type_of_analysis_Engineer_1", "Engineer_1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HospitalModel", "FK_Type_of_analysis_Laboratory", "Laboratory")]
        public Laboratory Laboratory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Laboratory>("HospitalModel.FK_Type_of_analysis_Laboratory", "Laboratory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Laboratory>("HospitalModel.FK_Type_of_analysis_Laboratory", "Laboratory").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Laboratory> LaboratoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Laboratory>("HospitalModel.FK_Type_of_analysis_Laboratory", "Laboratory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Laboratory>("HospitalModel.FK_Type_of_analysis_Laboratory", "Laboratory", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
